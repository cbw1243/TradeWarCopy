climate.variable = "tas"
climate.variable = "pre"
## Read yields (an array of 720X360X(N of years x 12)):
var <- ncvar_get(ncfile, varid = climate.variable)
start_year = 1941; end_year = 1950
year <- c(start_year:end_year)
month <- c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")
time <- c(NULL)
for (i in year)
for (j in month)
time <- c(time, paste(i,j,sep="_"))
## Collapse the yield array so it becomes a column:
var.longformat <- melt(var)
var.1 <- var.longformat %>%
mutate(year = as.character(substr(as.character(time),1,4)),
month = as.numeric(substr(as.character(time),6,7)))
names(var.longformat) <- c("lon", "lat", "time", "value")
View(var.longformat)
summary(var.longformat)
720*360*120
summary(var.longformat)
## Read yields (an array of 720X360X(N of years x 12)):
var <- ncvar_get(ncfile, varid = climate.variable)
## Collapse the yield array so it becomes a column:
var.longformat <- melt(var)
## the other files:
dimnames(var)
## Assign the longitudes and latitudes to facilitate merging with
## the other files:
dimnames(var) <- list(lon,lat,time)
dimnames(var)
## Set non-land areas to NA before further processing:
fillvalue <- ncatt_get(ncfile, climate.variable, "_FillValue")
var[var == fillvalue$value] <- NA
## Collapse the yield array so it becomes a column:
var.longformat <- melt(var)
var.1 <- var.longformat %>%
mutate(year = as.character(substr(as.character(time),1,4)),
month = as.numeric(substr(as.character(time),6,7))) %>%
dplyr::select(lon, lat, year, month, value) %>%
do(filter(., complete.cases(.)))
names(var.longformat) <- c("lon", "lat", "time", "value")
var.1 <- var.longformat %>%
mutate(year = as.character(substr(as.character(time),1,4)),
month = as.numeric(substr(as.character(time),6,7))) %>%
dplyr::select(lon, lat, year, month, value) %>%
do(filter(., complete.cases(.)))
rm(var.longformat)
rm(var)
gc()
## Collapse the yield array so it becomes a column:
var.longformat <- melt(var)
## Read yields (an array of 720X360X(N of years x 12)):
var <- ncvar_get(ncfile, varid = climate.variable)
## Assign the longitudes and latitudes to facilitate merging with
## the other files:
dimnames(var) <- list(lon,lat,time)
## Collapse the yield array so it becomes a column:
var.longformat <- melt(var)
names(var.longformat) <- c("lon", "lat", "time", "value")
head(var.longformat, 100)
## Set non-land areas to NA before further processing:
fillvalue <- ncatt_get(ncfile, climate.variable, "_FillValue")
fillvalue
rm(var)
gc()
fillvalue
head(var.1, 100)
View(var.1)
summary(var.1)
head(var.longformat, 20)
test <- var.longformat[c(1:1000), ]
rm(var.1)
View(test)
var.1 <- var.longformat %>%
mutate(year = as.character(substr(as.character(time),1,4)),
month = as.numeric(substr(as.character(time),6,7))) %>%
dplyr::select(lon, lat, year, month, value) %>%
do(filter(., complete.cases(.)))
rm(list=ls())
gc()
library(XRJulia)
findJulia(test = T)
Sys.setenv(PATH = 'C:/BWCHEN/PROGRAMS/Julia/Julia-1.0.2')
library(XRJulia)
findJulia(test = T)
Sys.setenv(PATH = 'C:/BWCHEN/PROGRAMS/Julia/Julia-1.0.2/bin')
library(XRJulia)
findJulia(test = T)
library(XRJulia)
findJulia(test = T)
Sys.setenv(PATH = 'C:/BWCHEN/PROGRAMS/Julia/Julia-1.0.2/bin')
library(XRJulia)
findJulia(test = T)
regjl <- juliaEval("
function reg(x,y)
n=size(x,1)
xreg=hcat(ones(size(x)[1],1),x)
k=size(xreg,2)
p1=((xreg'xreg)^(-1))
b=p1*xreg'y
r=y-xreg*b
sig=(r'r)/(n-k)
vmat=sig[1]*p1
sigb=sqrt(diag(vmat))
t=b./sigb
return (b,t)
end
")
tradeDat <- fread(input = 'C:/Users/BWChen/Dropbox (Personal)/EdoImport/5_Data/UNComtradeWheatRiceMaizeClean11182018.csv') %>%
filter(Commodity == 'Wheat')
library(dplyr)
library(data.table)
tradeDat <- fread(input = 'C:/Users/BWChen/Dropbox (Personal)/EdoImport/5_Data/UNComtradeWheatRiceMaizeClean11182018.csv') %>%
filter(Commodity == 'Wheat')
tradeDat <- fread(input = 'C:/Users/BWChen/Dropbox (Personal)/EdoImport/5_Data/UNComtradeWheatRiceMaizeClean11182018.csv')
unique(tradeDat$ReporterName)
wheatDat <- tradeDat %>%
filter(Commodity == 'Wheat') %>%
group_by(Year, ReporterName, ReporterISO) %>%
summarise(Value = sum(Value))
View(wheatDat)
wheatDat <- tradeDat %>%
filter(Commodity == 'Wheat') %>%
group_by(Year, ReporterName, ReporterISO) %>%
summarise(Value = sum(Value, na.rm = T)) %>%
group_by(Year) %>%
mutate(ImportShare = Value/sum(Value, na.rm = T))
wheatDat <- tradeDat %>%
filter(Commodity == 'Wheat') %>%
group_by(Year, ReporterName, ReporterISO) %>%
summarise(Value = sum(Value, na.rm = T)) %>%
group_by(Year) %>%
mutate(ImportShare = Value/sum(Value, na.rm = T)) %>%
group_by(ReporterName) %>%
mutate(AveImportShare = mean(ImportShare)) %>%
mutate(ReporterName = ifelse(AveImportShare >= 0.1, ReporterName, 'Rest')) %>%
group_by(Year, ReporterName) %>%
summarise(ImportShare = sum(ImportShare, na.rm = T))
wheatDat <- tradeDat %>%
filter(Commodity == 'Wheat') %>%
group_by(Year, ReporterName, ReporterISO) %>%
summarise(Value = sum(Value, na.rm = T)) %>%
group_by(Year) %>%
mutate(ImportShare = Value/sum(Value, na.rm = T)) %>%
group_by(ReporterName) %>%
mutate(AveImportShare = mean(ImportShare)) %>%
ungroup() %>%
mutate(ReporterName = ifelse(AveImportShare >= 0.1, ReporterName, 'Rest')) %>%
group_by(Year, ReporterName) %>%
summarise(ImportShare = sum(ImportShare, na.rm = T))
View(wheatDat)
unique(wheatDat$ReporterName)
wheatDat <- tradeDat %>%
filter(Commodity == 'Wheat') %>%
group_by(Year, ReporterName, ReporterISO) %>%
summarise(Value = sum(Value, na.rm = T)) %>%
group_by(Year) %>%
mutate(ImportShare = Value/sum(Value, na.rm = T)) %>%
group_by(ReporterName) %>%
mutate(AveImportShare = mean(ImportShare)) %>%
ungroup() %>%
mutate(ReporterName = ifelse(AveImportShare >= 0.1 | ReporterName == 'Russia', ReporterName, 'Rest')) %>%
group_by(Year, ReporterName) %>%
summarise(ImportShare = sum(ImportShare, na.rm = T))
unique(wheatDat$ReporterName)
wheatDat <- tradeDat %>%
filter(Commodity == 'Wheat') %>%
group_by(Year, ReporterName, ReporterISO) %>%
summarise(Value = sum(Value, na.rm = T)) %>%
group_by(Year) %>%
mutate(ImportShare = Value/sum(Value, na.rm = T)) %>%
group_by(ReporterName) %>%
mutate(AveImportShare = mean(ImportShare)) %>%
ungroup() %>%
mutate(ReporterName = ifelse(AveImportShare >= 0.1 | ReporterName == 'Russian Federation', ReporterName, 'Rest')) %>%
group_by(Year, ReporterName) %>%
summarise(ImportShare = sum(ImportShare, na.rm = T))
unique(wheatDat$ReporterName)
install.packages('gganimate')
library(devtools)
devtools::install_github("dgrtwo/gganimate")
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
library(dplyr)
library(data.table)
tradeDat <- fread(input = 'C:/Users/BWChen/Dropbox (Personal)/EdoImport/5_Data/UNComtradeWheatRiceMaizeClean11182018.csv')
wheatDat <- tradeDat %>%
filter(Commodity == 'Wheat') %>%
group_by(Year, ReporterName, ReporterISO) %>%
summarise(Value = sum(Value, na.rm = T)) %>%
group_by(Year) %>%
mutate(ImportShare = Value/sum(Value, na.rm = T)) %>%
group_by(ReporterName) %>%
mutate(AveImportShare = mean(ImportShare)) %>%
ungroup() %>%
mutate(ReporterName = ifelse(AveImportShare >= 0.1 | ReporterName == 'Russian Federation', ReporterName, 'Rest')) %>%
group_by(Year, ReporterName) %>%
summarise(ImportShare = sum(ImportShare, na.rm = T))
ggplot(wheatDat) +
geom_bar(mapping = aes(x = Year, ImportShare, fill = ReporterName), stat = 'identity')
ggplot(wheatDat) +
geom_line(mapping = aes(x = Year, ImportShare, fill = ReporterName), stat = 'identity')
ggplot(wheatDat) +
geom_line(mapping = aes(x = Year, ImportShare, color = ReporterName), stat = 'identity')
ggplot(wheatDat) +
geom_line(mapping = aes(x = Year, ImportShare, color = ReporterName))
p <-
ggplot(wheatDat) +
geom_line(mapping = aes(x = Year, ImportShare, color = ReporterName, frame = Year))
p <-
ggplot(wheatDat) +
geom_path(mapping = aes(x = Year, ImportShare, color = ReporterName, frame = Year))
p <-
ggplot(wheatDat, mapping = aes(x = Year, ImportShare, color = ReporterName, frame = Year)) +
geom_path()
gganimate(p)
require(installr)
install.packages('installr')
require(installr)
updateR()
?random
out[1] <- sample(a)
a <- seq(1,13, by = 1)
out <- c()
out[1] <- sample(a)
function(){
out <- c()
out[1] <- sample(a)
out[2] <- sample(a)
x <- ifelse(out[1] == out[2], 1, 0)
x
}
test <- function(){
out <- c()
out[1] <- sample(a)
out[2] <- sample(a)
x <- ifelse(out[1] == out[2], 1, 0)
x
}
x <- sapply(1:10, test)
test <- function(){
out <- c()
out[1] <- sample(a)
out[2] <- sample(a)
x <- ifelse(out[1] == out[2], 1, 0)
x
}
x <- sapply(1:10, test)
test <- function(...){
out <- c()
out[1] <- sample(a)
out[2] <- sample(a)
x <- ifelse(out[1] == out[2], 1, 0)
x
}
x <- sapply(1:10, test)
warnings()
out <- c()
out[1] <- sample(a)
out[2] <- sample(a)
test <- function(...){
draw1 <- sample(a)
draw2 <- sample(a)
x <- ifelse(out[1] == out[2], 1, 0)
x
}
x <- sapply(1:10, test)
x <- sapply(1:10000, test)
num <- 10000
x <- sapply(1:num, test)
sum(x)/num
test <- function(...){
draw1 <- sample(a)
draw2 <- sample(a)
x <- ifelse(draw1 == draw2, 1, 0)
x
}
num <- 10000
x <- sapply(1:num, test)
sum(x)/num
test <- function(...){
draw1 <- sample(a)
draw2 <- sample(a)
x <- ifelse(draw1 == draw2, 1, 0)
x
}
num <- 10000
out <- sapply(1:num, test)
num <- 100
out <- sapply(1:num, test)
View(out)
test <- function(...){
draw1 <- sample(a)
draw2 <- sample(a)
x <- ifelse(draw1 == draw2, 1, 0)
x
}
test()
draw1 <- sample(a, 1)
test <- function(...){
draw1 <- sample(a, 1)
draw2 <- sample(a, 1)
x <- ifelse(draw1 == draw2, 1, 0)
x
}
test()
num <- 100
out <- sapply(1:num, test)
sum(x)/num
num <- 100
out <- sapply(1:num, test)
num <- 10000
out <- sapply(1:num, test)
sum(out)/num
1/13
num <- 1000000
out <- sapply(1:num, test)
sum(out)/num
1/169
1/13
3/51
sum(out)/num
3/51
1/17
num <- 100000
out <- sapply(1:num, test)
sum(out)/num
1/17
51*sum(out)/num
a <- rep(seq(1,13, by = 1), 4)
a
draw1 <- a[sample(1:51, 1)]
draw1pos <- sample(1:51, 1)
test <- function(...){
draw1pos <- sample(1:51, 1)
draw1 <- a[draw1pos]
draw2 <- sample(a[-draw1pos], 1)
x <- ifelse(draw1 == draw2, 1, 0)
x
}
test()
num <- 10000
out <- sapply(1:num, test)
sum(out)/num
1/17
num <- 100000
out <- sapply(1:num, test)
sum(out)/num
1/17
library(dplyr)
?bind_rows
one <- mtcars[1:4, ]
two <- mtcars[11:14, ]
# You can supply data frames as arguments:
bind_rows(one, two)
# You can supply data frames as arguments:
bind_cols(one, two)
set.seed(1)
x=matrix(rnorm(20*2), ncol=2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,] + 1
plot(x, col=(3-y))
# Support vector classfier.
dat=data.frame(x=x, y=as.factor(y))
svmfit=svm(y~., data=dat , kernel =" linear ", cost =10, scale =FALSE )
library(e1071)
svmfit=svm(y~., data=dat , kernel =" linear ", cost =10, scale =FALSE )
svmfit=svm(y~., data=dat , kernel = "linear", cost =10, scale =FALSE )
plot(svmfit, dat)
tune.out=tune(svm, y ~.,data=dat ,kernel = "linear",
ranges =list(cost=c(0.001 , 0.01, 0.1, 1,5,10,100) ))
bestmod=tune.out$best.model
summary(bestmod)
svmfitOptim =svm(y~., data=dat , kernel = "linear", cost =0.1, scale =FALSE )
plot(svmfitOptim, dat)
set.seed(1)
x = matrix(rnorm(200*2), ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x, col=y)
svmfit=svm(y~, data=dat [train,], kernel = "radial", gamma =1,
cost =1)
svmfit=svm(y~, data=dat[train,], kernel = "radial", gamma =1, cost =1)
svmfit= svm(y~, data=dat[train,], kernel = "radial", gamma =1, cost =1)
svmfit= svm(y~, data=dat[train,], kernel = "radial", gamma =1, cost =1)
svmfit= svm(y~., data=dat[train,], kernel = "radial", gamma =1, cost =1)
train=sample(200,100)
svmfit= svm(y~., data=dat[train,], kernel = "radial", gamma =1, cost =1)
plot(svmfit, dat[train,])
0.0034*5
# Example from Statistical Learning (page 323)
library(tree)
install.packages('tree')
install.packages('ISLR')
# Example from Statistical Learning (page 323)
library(tree)
library(ISLR)
attach (Carseats)
High=ifelse (Sales <=8," No"," Yes ")
Carseats =data.frame(Carseats ,High)
High= ifelse(Sales <= 8, "No", "Yes")
Carseats  <- data.frame(Carseats ,High)
# Fit a tree model.
tree.carseats <- tree(High ~.- Sales, Carseats)
summary(tree.carseats)
# Example from Statistical Learning (page 323)
rm(list = ls())
library(tree)
library(ISLR)
attach (Carseats)
High= ifelse(Sales <= 8, "No", "Yes")
Carseats <- data.frame(Carseats ,High)
# Fit a tree model.
tree.carseats <- tree(High ~.- Sales, Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats ,pretty =0)
train=sample (1: nrow(Carseats ), 200)
Carseats.test=Carseats [-train ,]
# Cross-validation.
set.seed (2)
train=sample (1: nrow(Carseats ), 200)
Carseats.test=Carseats [-train ,]
High.test=High[-train ]
tree.carseats = tree(High ~.-Sales ,Carseats ,subset =train )
tree.pred=predict (tree.carseats ,Carseats.test , type = "class")
table(tree.pred ,High.test)
# Tree-pruning using cross validation.
set.seed (3)
cv.carseats <- cv.tree(tree.carseats, FUN=prune.misclass)
par(mfrow =c(1,2))
plot(cv.carseats$size ,cv.carseats$dev ,type="b")
plot(cv.carseats$k ,cv.carseats$dev ,type="b")
?tree
?cv.tree
plot(cv.carseats$k ,cv.carseats$dev ,type="b")
# Prune the tree manually.
tree.prune <- prune.tree(tree.carseats, k = 1, newdata = Carseats.test)
# Prune the tree manually.
tree.prune <- prune.tree(tree.carseats, k = 1, newdata = Carseats.test, method = 'misclass')
summary(tree.prune)
plot(tree.prune)
text(tree.prune, pretty = 0)
par(mfrow =c(1,1))
plot(tree.prune)
text(tree.prune, pretty = 0)
# Prune the tree manually.
tree.prune <- prune.tree(tree.carseats, k = 10, newdata = Carseats.test, method = 'misclass')
summary(tree.prune)
plot(tree.prune)
text(tree.prune, pretty = 0)
# Prune the tree manually.
tree.prune <- prune.tree(tree.carseats, k = 1, newdata = Carseats.test, method = 'misclass')
# k is the cost ccomplexity parameter, newdata is used to calculate the error rate.
NodeNum <- tree.prune$
summary(tree.prune)
summary(tree.prune)
x <- summary(tree.prune)
tree.prune <- prune.tree(tree.carseats, k = 5, newdata = Carseats.test, method = 'misclass')
# k is the cost ccomplexity parameter, newdata is used to calculate the error rate.
summary(tree.prune)
# k is the cost ccomplexity parameter, newdata is used to calculate the error rate.
summary(tree.prune)
plot(tree.prune)
text(tree.prune, pretty = 0)
?cv.tree
detach (Carseats)
if (!require(rstudioapi)) install.packages('rstudioapi')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('KeyFunction.r')
heart_sf <- tibble(t = seq(0, 2 * pi, by = .1)) %>%
mutate(y = yhrt(t),
x = xhrt(t))
heart_sf <- tibble(t = seq(0, 2 * pi, by = .1)) %>%
mutate(y = yhrt(t),
x = xhrt(t)) %>%
bind_rows(., head(., 1))
heart_sf <- tibble(t = seq(0, 2 * pi, by = .1)) %>%
mutate(y = yhrt(t),
x = xhrt(t)) %>%
bind_rows(., head(., 1)) %>%
dplyr::select(x, y) %>%
as.matrix()
heart_sf <- tibble(t = seq(0, 2 * pi, by = .1)) %>%
mutate(y = yhrt(t),
x = xhrt(t)) %>%
bind_rows(., head(., 1)) %>%
dplyr::select(x, y) %>%
as.matrix() %>%
list() %>%
st_polygon() %>%
st_sfc(crs = 2154)
g1 <-
ggplot(heart_sf) +
geom_sf(fill = "#cb181d", color = '#cb181d') +
annotate('text', x = 0, y = 0, label = 'H. Geng', size = 10, fontface = "italic") +
coord_sf(crs = 2154, datum = 2154) +
theme(axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank())
dev.new()
plot(g1)
source('KeyFunction.r')
dev.off()
source('KeyFunction.r')
source('KeyFunction.r')
.libPaths()
